import os
import psycopg2
from dotenv import load_dotenv
from contextlib import contextmanager
import streamlit as st

# Carrega as vari√°veis de ambiente
load_dotenv()

def get_db_config():
    """Retorna as configura√ß√µes do banco de dados do Supabase."""
    # Para desenvolvimento local
    if os.getenv('DB_HOST'):
        return {
            'host': os.getenv('DB_HOST', 'localhost'),
            'database': os.getenv('DB_NAME', 'transporte_universitario'),
            'user': os.getenv('DB_USER', 'postgres'),
            'password': os.getenv('DB_PASS', ''),
            'port': os.getenv('DB_PORT', '5432')
        }
    # Para Streamlit Cloud - usando secrets
    else:
        return {
            'host': st.secrets["db_host"],
            'database': st.secrets["db_name"],
            'user': st.secrets["db_user"],
            'password': st.secrets["db_pass"],
            'port': st.secrets["db_port"]
        }

@contextmanager
def conectar():
    """
    Gerenciador de contexto para conex√£o com o banco de dados.
    Tenta reconectar automaticamente em caso de erro.
    """
    conn = None
    try:
        # Tenta estabelecer a conex√£o
        conn = psycopg2.connect(**get_db_config())
        conn.autocommit = True  # Ativa autocommit
        yield conn
    except psycopg2.OperationalError as e:
        st.error(f"‚ùå Erro de conex√£o com o banco de dados: {e}")
        st.error("Verifique se as credenciais do banco de dados est√£o configuradas corretamente nos secrets do Streamlit.")
        st.info("Para desenvolvimento local, use um arquivo .env com as configura√ß√µes do banco.")
        st.info("Para deploy no Streamlit Cloud, configure os secrets do projeto.")
        raise
    except psycopg2.Error as e:
        st.error(f"‚ùå Erro no banco de dados: {e}")
        if conn:
            conn.rollback()
        raise
    finally:
        if conn:
            conn.close()

# Fun√ß√£o para verificar a conex√£o
def verificar_conexao():
    """Verifica se √© poss√≠vel conectar ao banco de dados."""
    try:
        with conectar() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT version();")
                version = cur.fetchone()
                st.success("‚úÖ Conex√£o com o banco de dados estabelecida com sucesso!")
                st.info(f"üìä Vers√£o do PostgreSQL: {version[0]}")
                return True
    except Exception as e:
        st.error(f"‚ùå Erro ao conectar ao banco de dados: {e}")
        return False

# Fun√ß√£o para criar o banco de dados e as tabelas
def criar_banco_dados():
    """Cria as tabelas necess√°rias no banco de dados."""
    try:
        with conectar() as conn:
            with conn.cursor() as cur:
                # L√™ o arquivo SQL
                with open('database_schema.sql', 'r', encoding='utf-8') as file:
                    sql_commands = file.read()
                cur.execute(sql_commands)
                st.success("‚úÖ Tabelas criadas com sucesso!")
        return True
    except Exception as e:
        st.error(f"‚ùå Erro ao criar tabelas: {e}")
        return False

# Verifica a conex√£o ao iniciar
if __name__ == "__main__":
    verificar_conexao()